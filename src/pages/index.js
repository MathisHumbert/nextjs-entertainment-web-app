import React, { useEffect } from 'react';
import Head from 'next/head';
import { useSession, signOut } from 'next-auth/react';
import { useRouter } from 'next/router';

import { useAppContext } from '../context/appContext';
import Navbar from '../components/Navbar';
import SearchInput from '../components/SearchInput';
import Slider from '../components/Slider';
import MoviesList from '../components/MoviesList';
import { MainContainer, SecondaryContainer } from '../styles/components';
import { connectToDatabase } from '../services/mongodb';

const Home = ({ serverData = [] }) => {
  const { data, inputValue, setDataOnMount } = useAppContext();
  const { data: session } = useSession();
  const router = useRouter();

  console.log(session);

  useEffect(() => {
    setDataOnMount(serverData);
  }, [serverData]);

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <MainContainer>
        <Navbar />
        {/* {session ? (
          <button onClick={() => signOut()}>Log out</button>
        ) : (
          <button onClick={() => router.push('/api/auth/signin')}>Log out</button>
        )} */}

        <SecondaryContainer>
          <div>
            <SearchInput placeholder={'Search for movies or TV series'} />
            {inputValue ? (
              <MoviesList
                data={data}
                title={`Found ${data.length > 0 ? data.length : 'no'} result${
                  data.length > 1 ? 's' : ''
                } for '${inputValue}'`}
              />
            ) : (
              <>
                <Slider data={serverData} />
                <MoviesList
                  data={serverData.filter(
                    (movie) => movie.isTrending === false
                  )}
                  title='Recommended for you'
                />
              </>
            )}
          </div>
        </SecondaryContainer>
      </MainContainer>
    </>
  );
};

export async function getServerSideProps(context) {
  const { db } = await connectToDatabase();
  const serverData = await db.collection('movies').find().toArray();

  return {
    props: {
      serverData: serverData.map((item) => ({
        _id: item._id.toString(),
        title: item.title,
        category: item.category,
        isBookmarked: item.isBookmarked,
        isTrending: item.isTrending,
        rating: item.rating,
        year: item.year,
      })),
    },
  };
}

export default Home;
